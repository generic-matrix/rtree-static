{"version":3,"sources":["Components/Canvas.js","Components/Tree.js","Model/Region.js","Model/Point.js","RTreeAdapter.js","App.js","reportWebVitals.js","index.js"],"names":["Rectangle","shapeProps","isSelected","onSelect","onChange","AddPoint","Getpoints","SetPoints","IsLeaf","shapeRef","React","useRef","trRef","useEffect","current","nodes","getLayer","batchDraw","Fragment","opacity","onDblClick","onDblTap","ref","draggable","onClick","e","evt","button","pointerPosition","target","getStage","getPointerPosition","offset","x","y","parentid","id","pointId","prompt","json","slice","push","alert","onDragEnd","onTransformEnd","node","scaleX","scaleY","width","Math","max","height","boundBoxFunc","oldBox","newBox","Canvas","props","useState","selectedId","selectShape","TargetCoord","SetTargetCoord","checkDeselect","window","innerWidth","innerHeight","onMouseDown","onTouchStart","GetRectangles","map","rect","i","text","fill","IsDarkTheme","RTreeAdapter","newAttrs","rects","h","w","OnRectSizeChange","SetRectangles","dot","radius","shadowBlur","stroke","strokeWidth","dash","t0","performance","now","points","Search","t1","FoundPoints","splice","length","parent_region_id","name","console","log","JSON","stringify","RegionHash","SetFoundPoints","SetMs","TreeVIew","data","children","nodeRadius","margins","top","bottom","left","right","animated","Region","parent_id","color","edges","this","regions","region","target_bottom_left","target_top_right","bottom_left","top_right","x1","y1","x2","y2","x3","y3","x4","y4","c_region","result","IsPointInsideRegion","rectanglesOverlap","GetRegionRecursive","root_region","target_region_coord","point","Point","region_hash","root","NewRegion","AddSubRegion","AddRootRegion","GetRegionCount","Object","keys","GetRegionsBasedOnTargetRegion","PointsCount","RegionExists","useGlobalState","createGlobalState","IsCanvasView","Rectangles","Points","ms","dialogClosed","Main","SetDarkTheme","Ms","DialogClosed","SetdialogClosed","className","style","href","Button","variant","floor","random","toString","parent","AddNewRect","Tree","Dialog","open","aria-labelledby","aria-describedby","DialogContentText","Badge","badgeContent","Box","component","display","p","m","DialogActions","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.defa8a8d.chunk.js","sourcesContent":["import React from 'react';\nimport reactDom from 'react-dom';\nimport { render } from 'react-dom';\nimport { Stage, Layer, Rect, Transformer ,Text,Circle} from 'react-konva';\n\nconst Rectangle = ({ shapeProps, isSelected, onSelect, onChange,AddPoint,Getpoints,SetPoints,IsLeaf}) => {\n  const shapeRef = React.useRef();\n  const trRef = React.useRef();\n\n  React.useEffect(() => {\n    if (isSelected) {\n      // we need to attach transformer manually\n      trRef.current.nodes([shapeRef.current]);\n      trRef.current.getLayer().batchDraw();\n    }\n  }, [isSelected]);\n\n  return (\n    <React.Fragment>\n      <Rect\n        opacity={0.4}\n        onDblClick={onSelect}\n        onDblTap={onSelect}\n        ref={shapeRef}\n        {...shapeProps}\n        draggable\n        onClick={\n            (e)=>{\n                if(e.evt.button===1){\n                    // Add the point \n                    const stage = e.target.getStage();\n                    const pointerPosition = stage.getPointerPosition();\n                    const offset = {x:pointerPosition.x, y: pointerPosition.y};\n                    const parentid=shapeProps.id;\n                    //(90,3,\"vase\",50,50);\n                    const pointId=prompt(\"Add the point name\");\n                    if(pointId===null || pointId===\"\"){\n                    }else{\n                        if(IsLeaf(parentid)){\n                            //Add the point in the UI\n                            let json=Getpoints.slice();\n                            json.push({\n                                x:offset.x,\n                                y:offset.y\n                            });\n                            AddPoint(pointId,parentid,pointId,offset.x,offset.y*-1);\n                            SetPoints(json);\n                        }else{\n                            alert(\"Cannot add points in Non leaf region \");\n                        }\n                    }\n                }\n            }\n        }\n        onDragEnd={(e) => {\n          onChange({\n            ...shapeProps,\n            x: e.target.x(),\n            y: e.target.y(),\n          });\n        }}\n        onTransformEnd={(e) => {\n          // transformer is changing scale of the node\n          // and NOT its width or height\n          // but in the store we have only width and height\n          // to match the data better we will reset scale on transform end\n          const node = shapeRef.current;\n          const scaleX = node.scaleX();\n          const scaleY = node.scaleY();\n\n          // we will reset it back\n          node.scaleX(1);\n          node.scaleY(1);\n          onChange({\n            ...shapeProps,\n            x: node.x(),\n            y: node.y(),\n            // set minimal value\n            width: Math.max(5, node.width() * scaleX),\n            height: Math.max(node.height() * scaleY),\n          });\n        }}\n      />\n      {isSelected && (\n        <Transformer\n          ref={trRef}\n          boundBoxFunc={(oldBox, newBox) => {\n            // limit resize\n            if (newBox.width < 5 || newBox.height < 5) {\n              return oldBox;\n            }\n            return newBox;\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\n\nconst Canvas = (props) => {\n  const [selectedId, selectShape] = React.useState(null);\n  const [TargetCoord, SetTargetCoord] = React.useState([20,50]);\n  const checkDeselect = (e) => {\n    // deselect when clicked on empty area\n    const clickedOnEmpty = e.target === e.target.getStage();\n    if (clickedOnEmpty) {\n      selectShape(null);\n    }\n  };\n\n  return (\n    <Stage\n      width={window.innerWidth}\n      height={window.innerHeight}\n      onMouseDown={checkDeselect}\n      onTouchStart={checkDeselect}\n    >\n      <Layer>\n        {props.GetRectangles.map((rect, i) => {\n          return (\n            <>\n            <Text text={rect.id} x={rect.x} y={rect.y}  fill={(props.IsDarkTheme)?\"white\":\"black\"}/>\n                <Rectangle\n                key={i}\n                shapeProps={rect}\n                AddPoint={props.RTreeAdapter.AddPoint}\n                IsLeaf={props.RTreeAdapter.IsLeaf}\n                Getpoints={props.Getpoints} \n                SetPoints={props.SetPoints} \n                isSelected={rect.id === selectedId}\n                onSelect={() => {\n                    selectShape(rect.id);\n                }}\n                onChange={(newAttrs) => {\n                    const rects = props.GetRectangles.slice();\n                    rects[i] = newAttrs;\n                    //change by id \n                    let x=newAttrs.x;\n                    let y=newAttrs.y;\n                    let h=newAttrs.height;\n                    let w=newAttrs.width;\n                    props.RTreeAdapter.OnRectSizeChange(rect.id,[x,-1*(y+h),x+w,y*-1]);\n                    props.SetRectangles(rects);\n                }}\n                />\n            </>\n          );\n        })}\n        {/*Point ID comes here */}\n        {props.Getpoints.map((dot, i) => {\n            return(\n                <Circle key={i} x={dot.x} y={dot.y} radius={3} fill=\"black\" shadowBlur={30} />\n            );\n        })}\n        <Text text=\"Target\" x={TargetCoord[0]} y={TargetCoord[1]}  fill={(props.IsDarkTheme)?\"white\":\"black\"}/>\n        <Rect\n          x={TargetCoord[0]}\n          y={TargetCoord[1]}\n          width={300}\n          height={300}\n          stroke='yellow'\n          strokeWidth={1}\n          dash={[1, 1]}\n          shadowBlur={10}\n          draggable\n          onDragEnd={(e) => {\n            //Find the points in the region [x,y+h,x+w,y]\n            var t0 = performance.now()\n            //[e.target.x(),(e.target.y()+100)*-1,e.target.x()+100,e.target.x()*-1]\n            let points=props.RTreeAdapter.Search([e.target.x(),(e.target.y()+300)*-1,e.target.x()+300,e.target.y()*-1]);\n            var t1 = performance.now()\n            //update in state (the array) FoundPoints\n            let json=props.FoundPoints.splice();\n            for(var i=0;i<points.length;i++){\n                json.push({\n                    parent_region_id:points[i].parent_region_id,\n                    name:points[i].name\n                });\n            }\n            console.log([e.target.x(),(e.target.y()+300)*-1,e.target.x()+300,e.target.y()*-1]);\n            console.log(JSON.stringify(props.RTreeAdapter.RegionHash()));\n            props.SetFoundPoints(json);\n            SetTargetCoord([e.target.x(),e.target.y()])\n            props.SetMs(t1-t0);\n          }}\n        />\n      </Layer>\n    </Stage>\n  );\n};\n\n\n\nexport default Canvas;","\nimport React from 'react';\nimport Tree from 'react-tree-graph';\nimport 'react-tree-graph/dist/style.css'\nimport \"../CustomTree.css\"\nconst TreeVIew = () => {\n  let data = {\n\tname: 'Parent',\n\tchildren: [{\n\t\tname: 'Child One',\n        children:[{\n            name:\"child3\"\n        }]\n\t}, {\n\t\tname: 'Child Two'\n\t}]\n};\n\n  return (\n    <Tree\n\tdata={data}\n    nodeRadius={15}\n    margins={{ top: 20, bottom: 10, left: 20, right: 200 }}\n\theight={700}\n\twidth={1000}\n\tanimated={true}/>\n  );\n}\n\nexport default TreeVIew;","class Region {\n\n    constructor(id,parent_id,name,color,edges) {\n      this.id=id;\n      this.parent_id=parent_id;\n      this.name=name;\n      this.points=[];\n      this.color=color;\n      //[0,1,2,3]\n      this.edges=edges;\n      this.regions=[];\n    }\n\n    // Add Sub Region ... based on the direction\n    AddSubRegion(region){\n      this.regions.push(region);\n    }\n\n\n    rectanglesOverlap(target_bottom_left,target_top_right,bottom_left,top_right) {\n      let x1=target_bottom_left[0];\n      let y1=target_bottom_left[1];\n      let x2=target_top_right[0];\n      let y2=target_top_right[1];\n\n      let x3=bottom_left[0];\n      let y3=bottom_left[1];\n      let x4=top_right[0];\n      let y4=top_right[1];\n\n      return (x1 < x4) && (x3 < x2) && (y1 < y4) && (y3 < y2);\n    }\n\n    IsPointInsideRegion(target_bottom_left,target_top_right,x,y){\n      let x1=target_bottom_left[0];\n      let x2=target_top_right[0];\n      let y1=target_bottom_left[1];\n      let y2=target_top_right[1];\n      if(x > x1 && x < x2 &&  y > y1 && y < y2){\n        return true;\n      }else{\n        return false;\n      }\n    }\n\n    //O(r.log(n)) where r is the region searched for each child region\n    GetRegionRecursive(target_bottom_left,target_top_right,c_region,result){\n      if(c_region.IsLeaf()){\n        for(var i=0;i<c_region.points.length;i++){\n          if(this.IsPointInsideRegion(target_bottom_left,target_top_right,c_region.points[i].x,c_region.points[i].y)){\n            result.push(c_region.points[i]);\n          }\n        }\n      }else{\n        for(var i=0;i<c_region.regions.length;i++){\n          let edges=c_region.regions[i].edges;\n          let bottom_left=[edges[0],edges[1]];\n          let top_right=[edges[2],edges[3]];\n          //check if target and current region overlap and target contains fully current region\n          //console.log(\"Is region \"+bottom_left+\" \"+top_right+\" Inside target \"+target_bottom_left+\" \"+target_top_right);\n          if(this.rectanglesOverlap(target_bottom_left,target_top_right,bottom_left,top_right)){\n            this.GetRegionRecursive(target_bottom_left,target_top_right,c_region.regions[i],result)\n          }\n        }\n      }\n    }\n    // returns array of region based on target region coordinates\n    GetRegionsBasedOnTargetRegion(root_region,target_region_coord){\n      var target_bottom_left=[target_region_coord[0],target_region_coord[1]];\n      var target_top_right=[target_region_coord[2],target_region_coord[3]];\n      var result=[];\n      this.GetRegionRecursive(target_bottom_left,target_top_right,root_region,result)\n      return result;\n    }\n\n    //returns boolean value based on points count\n    IsLeaf(){\n      if(this.regions.length==0){\n        return true;\n      }else{\n        return false;\n      }\n    }\n\n    //Add point to the region\n    AddPoint(point){\n      this.points.push(point);\n    }\n  }\n\nexport default Region","class Point {\n\n    constructor(id,parent_region_id,name,x,y) {\n      this.id=id;\n      this.parent_region_id=parent_region_id;\n      this.name=name;\n      this.x=x;\n      this.y=y;\n    }\n}\n\n\n\nexport default Point\n","//POINT MUST NOT BE MOVABLE...\n\n//const Region=require(\"./Model/Region.js\");\n//const Point=require(\"./Model/Point.js\");\nimport Region from \"./Model/Region\";\nimport Point from \"./Model/Point\";\n//Map Region ID to Region Object\nlet region_hash={}\n\n//root id\nlet root=null;\n\n\nconst RTreeAdapter = {\n    //ramdom id , parent id,name of region,hexcode,an array of 4 elem\n    //O(1)\n    NewRegion:function(id,parent_id,name,color,edges){\n        if(region_hash[id]!=null){\n            throw (\"Id is already taken\");\n        }\n        if(region_hash[parent_id]==null){\n            throw (\"The parent id \"+parent_id+\" Does not exists\");\n        }\n        region_hash[id]=new Region(id,parent_id,name,color,edges);\n        region_hash[parent_id].AddSubRegion(region_hash[id]);\n    },\n\n    // Add root region O(1)\n    AddRootRegion:function(){\n        root=new Region(1,null,\"root\",\"#ffffff\",[0,0,10000,10000]);\n        region_hash[1]=root;\n    },\n\n    //the edges is an array of 4 elem\n    //O(e) where e is the elements in all the A,B,C,D\n    OnRectSizeChange:function(id,edges){\n        if(region_hash[id]==null){\n            throw (\"Id does not exists\");\n        }\n        region_hash[id].edges=edges;\n    },\n\n    //get number of elements in region_hash\n    //O(k) where k are the key in the object\n    GetRegionCount:function(){\n        return Object.keys(region_hash).length;\n    },\n\n    //Add point to the corrosponding region\n    AddPoint:function(id,parent_region_id,name,x,y){\n        if(region_hash[parent_region_id]==null){\n            throw (\"Id does not exists\");\n        }\n        region_hash[parent_region_id].AddPoint(new Point(id,parent_region_id,name,x,y));\n    },\n\n    //the function takes target region start and end coord\n    Search:function(target_region_coord){\n        if(root!=null){\n            return root.GetRegionsBasedOnTargetRegion(root,target_region_coord);\n        }else{\n            return [];\n        }\n    },\n\n    RegionHash:function(){\n        return region_hash;\n    },\n\n    IsLeaf:function(id){\n        return region_hash[id].IsLeaf();\n    },\n\n    PointsCount:function(id){\n        return region_hash[id].points.length;\n    },\n\n    RegionExists:function(id){\n        if(region_hash[id]!=null){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}\n\nexport default RTreeAdapter;\n/*module.exports={\n    \"NewRegion\":NewRegion,\n    \"AddRootRegion\":AddRootRegion,\n    \"OnRectSizeChange\":OnRectSizeChange,\n    \"GetRegionCount\":GetRegionCount,\n    \"AddPoint\":AddPoint,\n    \"Search\":Search,\n    \"RegionHash\":RegionHash,\n    \"IsLeaf\":IsLeaf,\n    \"PointsCount\":PointsCount,\n    \"RegionExists\":RegionExists\n}*/","import React from 'react';\nimport { createGlobalState } from 'react-hooks-global-state';\nimport Canvas from \"./Components/Canvas\";\nimport TreeView from \"./Components/Tree\";\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport Box from '@material-ui/core/Box';\nimport Badge from '@material-ui/core/Badge';\nimport './App.css';\nimport RTreeAdapter from \"./RTreeAdapter\";\nRTreeAdapter.AddRootRegion();\nconst initialState = { \n  IsDarkTheme: true,\n  IsCanvasView:true,\n  Rectangles:[],\n  Points:[],\n  FoundPoints:[],\n  ms:0,\n  dialogClosed:false\n};\nconst { useGlobalState } = createGlobalState(initialState);\n\nconst Main = () => {\n  const [IsDarkTheme, SetDarkTheme] = useGlobalState('IsDarkTheme');\n  const [IsCanvasView, SetCanvasView] = useGlobalState('IsCanvasView');\n  const [GetRectangles, SetRectangles] = useGlobalState('Rectangles');\n  const [Getpoints, SetPoints] = useGlobalState('Points');\n  const [FoundPoints, SetFoundPoints] = useGlobalState('FoundPoints');\n  const [Ms, SetMs] = useGlobalState('ms');\n  const [DialogClosed, SetdialogClosed] = useGlobalState('dialogClosed');\n  const AddNewRect = () => {\n    let color= (Math.floor(Math.random()*0xffffff)|0x0f0f0f).toString(16);\n    const rects = GetRectangles.slice();\n    let name=prompt(\"Type in the region name \");\n    rects.push({\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100,\n      fill: \"#\"+color,\n      id: name\n    });\n    // Add by ID\n    //[x,y+h]\n    //let bottom_left=[0,100]\n    //[x+w,y]\n    //let top_right=[100,0]\n    if(name===\"\" || name===null){\n      alert(\"Invalid region name\");\n    }else{\n      if(GetRectangles.length===0){\n        RTreeAdapter.NewRegion(name,1,name,\"#\"+color,[0,-100,100,0]);\n        SetRectangles(rects);\n      }else{\n        //Add for the parent id\n        let parent=prompt(\"Type in parent region name \");\n        if(parent===\"\" || parent===null){\n          alert(\"Invalid Parent name\");\n        }else{\n          //Check if the parent exists\n          if(RTreeAdapter.RegionExists(parent)==true && RTreeAdapter.RegionExists(name)==false){\n            if(RTreeAdapter.PointsCount(parent)<1){\n              RTreeAdapter.NewRegion(name,parent,name,\"#\"+color,[0,-100,100,0]);\n              SetRectangles(rects);\n            }else{\n              alert(\"Region cannot be added on a region which already contains points\");\n            }\n          }else{\n            alert(\"No Such Region with the parent id exists or region id is already taken\");\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\" style={{\"background-color\":(IsDarkTheme)?\"#282c34\":\"white\"}}>\n       <div className=\"App-header\">\n        <h2 style={{\"text-align\":\"center\",\"color\":(IsDarkTheme)?\"white\":\"black\"}} >R Tree</h2>\n        <p style={{\"font-size\":\"10px\",\"text-align\":\"center\",\"color\":(IsDarkTheme)?\"white\":\"black\"}}>How to use ? <br/> Click Add Region to add a region ,you can double tap it to resize it and you can drag it <br/>To add a point you need a mouse and hover on the point you need to add a point and then press the mouse mid scroll button .<br/>You can click on show points to get to know the points which is searched<br/></p><a href=\"https://github.com/generic-matrix/RTree\">Github</a><br/>\n        <p style={{\"font-size\":\"10px\",\"text-align\":\"center\",\"color\":(IsDarkTheme)?\"white\":\"black\"}}>{Ms} MS time taken</p>\n        {/*Options button*/}\n        <div style={{\"width\":\"100%\",\"display\":\"flex\",\"justify-content\": \"center\"}}>\n          {(IsCanvasView)?<div>&nbsp;<Button variant=\"outlined\" color=\"secondary\" onClick={()=>(AddNewRect())}>Add Region</Button>&nbsp;</div>:<div></div>}\n          <Button variant=\"outlined\" color=\"secondary\" onClick={()=>(SetdialogClosed(!DialogClosed))}>Show Points ({FoundPoints.length})</Button>&nbsp;\n          <Button variant=\"outlined\" color=\"secondary\" onClick={()=>(SetDarkTheme(!IsDarkTheme))}>{(IsDarkTheme)?\"Day Theme\":\"Night Theme\"}</Button>&nbsp;\n        </div>\n        {IsCanvasView?\n        <Canvas \n            GetRectangles={GetRectangles} \n            SetRectangles={SetRectangles} \n            SetFoundPoints={SetFoundPoints}\n            FoundPoints={FoundPoints}\n            Getpoints={Getpoints} \n            SetPoints={SetPoints} \n            IsDarkTheme={IsDarkTheme} \n            RTreeAdapter={RTreeAdapter}\n            SetMs={SetMs}\n        />:<TreeView/>}\n      </div>\n      <Dialog \n        open={DialogClosed}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\">\n        <DialogContentText >\n        <div style={{ width: '100%' }}>\n        {FoundPoints.map((point, i) => {\n          return (\n            <div>\n            &nbsp;&nbsp;&nbsp;<Badge badgeContent={\"\"} color=\"primary\"></Badge>\n            <Box component=\"div\" display=\"inline\" p={1} m={1} >\n              {point.name+\" In region \"+point.parent_region_id}\n            </Box><br/>\n          </div>\n          );\n        })}\n        </div>\n        </DialogContentText>\n        <DialogActions>\n          <Button  color=\"primary\" onClick={()=>(SetdialogClosed(!DialogClosed))}>\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nconst App = () => (\n    <Main />\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}